openapi: 3.0.3
info:
  title: Payment Management API
  description: 'Internal API for CRUD operations under customer’s credit cards. It also validates provided payment (by invoking external “Payment gateway” service). For simplicity we suppose there’s no billing address for CCs (so we don’t need to call Address Management API from Payment Management service)'
  termsOfService: _url_to_readme
  contact:
    email: isemenov@griddynamics.com
  version: 1.0.0
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
tags:
  - name: Payment
    description: Access to users' credit cards
paths:
  /payment:
    put:
      tags:
        - Payment
      summary: Update an existing payment
      operationId: updatePayment
      requestBody:
        description: Payment object that needs to be updated
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Payment'
        required: true
      responses:
        200:
          description: Payment succesfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment'
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Payment not found
          content: {}
        405:
          description: Validation exception
          content: {}
      x-codegen-request-body-name: body
    post:
      tags:
        - Payment
      summary: Add a new payment
      operationId: addPayment
      requestBody:
        description: Payment object that needs to be added
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Payment'
        required: true
      responses:
        201:
          description: Payment succesfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment'
        405:
          description: Invalid input
          content: {}
      x-codegen-request-body-name: body
  /payment/{userId}:
    get:
      tags:
        - Payment
      summary: Find payment by user ID
      description: Returns a list of user payments
      operationId: getPaymentsByUserId
      parameters:
        - name: userId
          in: path
          description: ID of user of payments to return
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Payment'
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: User not found
          content: {}
    post:
      tags:
        - Payment
      summary: Updates all payments for a user with provided ID
      operationId: updatePaymentsByUserId
      parameters:
        - name: userId
          in: path
          description: ID of user whose payment need to be updated
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Payment'
      responses:
        405:
          description: Invalid input
          content: {}
    delete:
      tags:
        - Payment
      summary: Deletes all payments for user by provided ID
      operationId: deleteAllUserPayments
      parameters:
        - name: userId
          in: path
          description: User id to delete their payments
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: User not found
          content: {}
components:
  schemas:
    Payment:
      required:
        - cardNumber
        - expiryYear
        - expiryMonth
      type: object
      properties:
        id:
          type: integer
          format: int64
          minimum: 1
          description: 'This field is only generated by the service, all new (not yet saved payments) should not have it filled'
        userId:
          type: integer
          format: int64
          minimum: 1
        cardNumber:
          type: string
          description: 'TODO: add some limitation here (probably need to convert to number or an array of numbers'
          example: 1234 5678 9098 7654
        expiryYear:
          type: integer
          description: Last 2 digits of expiry year (e.g. '2020' should be passed as '20')
          minimum: 0
          maximum: 99
        expiryMonth:
          type: integer
          minimum: 1
          maximum: 12
        cvv:
          type: string
          pattern: '[0-9]{3,4}'
        cardHolder:
          type: string
          maximum: 100
          example: 'CARD HOLDER'
        verified:
          type: boolean
          description: 'Set to true for for saved authorised (with token) cards'